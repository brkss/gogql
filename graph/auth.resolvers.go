package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	db "github.com/brkss/go-auth/db/sqlc"
	"github.com/brkss/gogql/graph/model"
	"github.com/brkss/gogql/utils"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.LoginUserInput) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input *model.RegisterUserInput) (*model.AuthResponse, error) {

	hashedPassword, err := utils.HashPassword(input.Password)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Cannot hasdh password !",
		}
	}
	arg := db.CreateUserParams{
		ID: uuid.New().String(),
		Name: input.Name,
		Email: input.Email,
		Password: hashedPassword,
	}
	user, err := r.Store.CreateUser(ctx, arg)
	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Cannot create user !",
		}
	}
	

}

// Me is the resolver for the Me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - Me"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
